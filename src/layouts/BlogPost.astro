---
import Layout from "./Layout.astro";
import type { CollectionEntry } from "astro:content";
import FormattedDate from "../components/FormattedDate.astro";

type Props = CollectionEntry<"blog">["data"] & { id: string };

const { id, title, description, pubDate, updatedDate, heroImage, tags } =
  Astro.props;

const structuredData = {
  "@context": "https://schema.org",
  "@type": "BlogPosting",
  headline: title,
  image: heroImage,
  datePublished: `${pubDate?.toISOString()}`,
  ...(updatedDate && { dateModified: updatedDate.toISOString() }),
};
---

<Layout
  title={title}
  description={description}
  heroImage={heroImage}
  structuredData={JSON.stringify(structuredData)}
>

  <article>
    <header>
      <div class="topbar">
        <FormattedDate date={pubDate} />
        {
          updatedDate && (
            <div class="last-updated-on">
              LAST UPDATE ON <FormattedDate date={updatedDate} />
            </div>
          )
        }
        <a href="/">HOME</a>
        <p id="theme-btn" aria-label="auto" aria-live="polite" role="button">
          <a id="theme-text" class="theme-text">
              LIGHT
          </a>
        </p>
      </li>
      </div>
      <h1>
        <span transition:name={`post-title-${id}`}>{title}</span>
      </h1>
    </header>
    
    <div class="content">
      <div class="prose">
        <slot />
      </div>
    </div>
  </article>
</Layout>

<style>
  header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    display: flex;
    flex-direction: column; /* Stack .topbar and h1 vertically */
    align-items: center; /* Center contents */
    padding: 10px 0;
    z-index: 1000; /* Keep it above other content */
    border-bottom: 1px dashed;
  }

  .topbar {
    display: flex;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 720px;
  }

  h1 {
    text-align: center;
    margin: 10px 0;
    width: 100%;
    max-width: 720px;
  }

  .content {
    padding-top: 210px; /* Prevents content from being hidden behind fixed header */
    font-size: 1.2em;
  }

  .prose {
    width: 100%;
    max-width: 720px;
    margin: 0 auto; /* Centers it horizontally */
    padding-bottom: 80px;
  }
  
</style>

<script>
  import mediumZoom from "medium-zoom/dist/pure";
  import "medium-zoom/dist/style.css";

  const zoom = mediumZoom(".prose img", {
    margin: 24,
    background: "rgba(0, 0, 0, 0.2)",
    scrollOffset: 0,
  });

  document.addEventListener("astro:after-swap", () => {
    zoom.attach(".prose img");
  });

  // Ensure script runs after DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    const themeBtn = document.getElementById("theme-btn");
    const themeText = document.getElementById("theme-text");

    if (!themeBtn || !themeText) {
      console.error("Theme button or text element not found!");
      return;
    }

    // Check current theme and set initial text
    if (document.body.classList.contains("dark-mode")) {
      themeText.textContent = "DARK";
    } else {
      themeText.textContent = "LIGHT";
    }

    themeBtn.addEventListener("click", () => {
      // Toggle the theme class
      document.body.classList.toggle("dark-mode");

      // Update the text depending on the new theme
      themeText.textContent = document.body.classList.contains("dark-mode")
        ? "DARK"
        : "LIGHT";
    });
  });
</script>
